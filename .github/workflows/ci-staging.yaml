name: CI/CD Staging Pipeline (CI - Lint, Test, Build)

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'

permissions:
  contents: read
  packages: write

jobs:
  extract-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.VERSION }}
    steps:
      - name: Extract version
        id: extract_version
        run: echo "VERSION=$(echo $GITHUB_REF | sed -n 's/refs\/tags\/v//p')" >> $GITHUB_OUTPUT
  fmt:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Rust dependencies
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Step 3: Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Step 4: Run `cargo fmt` to check formatting
      - name: Run cargo fmt
        run: cargo fmt -- --check
  clippy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Rust dependencies
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Step 3: Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Step 4: Run `cargo clippy` for linting
      - name: Run cargo clippy
        run: cargo clippy -- --D warnings
  build-and-push:
    needs: [fmt, clippy, extract-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Echo info
        run: |
          echo ${{ github.actor }}
          echo ${{ secrets.GITHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          provenance: false
          tags: ghcr.io/libreconnect/ferriscompany:${{ needs.extract-version.outputs.version }}
  update-yaml:
    needs: [build-and-push, extract-version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: 'libreconnect/infrastructure'
          ref: 'main'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Update deployment.yaml
        env:
          VERSION: ${{ needs.extract-version.outputs.version }} 
        run: |
          echo "Version staging qui sera déployée: $VERSION"
          yq -ie ".ferriscompany.image.tag = \"$VERSION\"" applications/ferriscompany/chart/environments/dev/values.yaml
      - name: Commit changes          
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add applications/ferriscompany/chart/environments/dev/values.yaml
          git commit -m "Update staging values.yml to $VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.extract-version.outputs.version }} 