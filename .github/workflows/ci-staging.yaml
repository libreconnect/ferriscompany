name: CI/CD Staging Pipeline (CI - Lint, Test, Build)

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'

permissions:
  contents: read
  packages: write

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Rust dependencies
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Step 3: Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Step 4: Run `cargo fmt` to check formatting
      - name: Run cargo fmt
        run: cargo fmt -- --check
  clippy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Cache Rust dependencies
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Step 3: Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Step 4: Run `cargo clippy` for linting
      - name: Run cargo clippy
        run: cargo clippy -- --D warnings

  # build:
  #   runs-on: ubuntu-latest
  #   needs: [fmt, clippy]
  #   steps:
  #     # Step 1: Checkout code
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     # Step 2: Cache Rust dependencies
  #     - name: Cache cargo registry
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #         key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-registry-

  #     - name: Cache cargo build
  #       uses: actions/cache@v3
  #       with:
  #         path: target
  #         key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-build-

  #     # Step 3: Set up Rust
  #     - name: Set up Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         override: true

  #     # Step 4: Build the project
  #     - name: Build the project
  #       run: cargo build --release

  #     # Step 5: Run tests
  #     - name: Run tests
  #       run: cargo test
  build-and-push:
    needs: [fmt, clippy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract version
        id: extract_version
        run: echo "VERSION=$(echo $GITHUB_REF | sed -n 's/refs\/tags\/v//p')" >> $GITHUB_OUTPUT
      - name: Echo info
        run: |
          echo ${{ github.actor }}
          echo ${{ secrets.GITHUB_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          provenance: false
          tags: ghcr.io/libreconnect/ferriscompany:${{ steps.extract_version.outputs.VERSION }}